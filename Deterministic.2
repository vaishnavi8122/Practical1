#44 33 11 55 77 90 40 60 99 22 88
def partition(arr, low, high):
    pivot = arr[(low + high) // 2]
    i = low - 1
    j = high + 1

    while True:
        while True:
            i += 1
            if arr[i] >= pivot:
                break

        while True:
            j -= 1
            if arr[j] <= pivot:
                break

        if i >= j:
            return j

        arr[i], arr[j] = arr[j], arr[i]

def quicksort(arr, low, high):
    if low < high:
        pivotIndex = partition(arr, low, high)
        quicksort(arr, low, pivotIndex)
        quicksort(arr, pivotIndex + 1, high)

if __name__ == "__main__":
    arr = [12, 4, 5, 6, 7, 3, 1, 15, 8, 9, 2, 10]
    
    print("Original array:", end=" ")
    print(*arr)

    import time

    start_time = time.time()  # Measure start time

    quicksort(arr, 0, len(arr) - 1)

    end_time = time.time()  # Measure end time

    print("Sorted array:", end=" ")
    print(*arr)

    execution_time = end_time - start_time
    print(f"Execution Time: {execution_time} seconds")

    # Space Complexity: O(log n) due to recursion
